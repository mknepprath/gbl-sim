import { useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";

import useInterval from "../hooks/use-interval";
import styles from "../styles/Practice.module.css";

const Practice: NextPage = () => {
  const [count, setCount] = useState<number>(0);
  const [delay, setDelay] = useState<number>(500);
  const [isPlaying, setPlaying] = useState<boolean>(false);

  const [incrEnergy, setIncrEnergy] = useState<boolean>(false);
  const [energy, setEnergy] = useState<number>(0);
  const [oppoTurns, setOppoTurns] = useState<number>(3);
  const [oppoEnergy, setOppoEnergy] = useState<number>(0);

  const [pokemon, setPokemon] = useState({
    name: "Nidoqueen (Shadow)",
    fastMove: {
      name: "Poison Jab",
      energyPerTurn: 3.5,
      turns: 2,
    },
    chargedMoves: [
      {
        name: "Poison Fang",
        energy: 35,
      },
      { name: "Earth Power", energy: 55 },
    ],
  });

  useInterval(
    () => {
      // Your custom logic here
      setCount(count + 1);
      if (incrEnergy && count % pokemon.fastMove.turns === 0) {
        setEnergy((e) =>
          Math.min(
            e + pokemon.fastMove.energyPerTurn * pokemon.fastMove.turns,
            100
          )
        );
        setIncrEnergy(false);
      }
      if (count % oppoTurns === 0) {
        console.log(count, (10 / 3) * oppoTurns);
        setOppoEnergy((e) => Math.min(e + (10 / 3) * oppoTurns, 100));
      }
    },
    // Delay in milliseconds or null to stop it
    isPlaying ? delay : null
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Practice</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Practice!</h1>

        <p className={styles.description}>
          Turn: <code className={styles.code}>{count}</code>
          {!isPlaying ? (
            <>
              <button onClick={() => setPlaying(true)}>Play</button>
              <button
                onClick={() => {
                  setCount(0);
                  setIncrEnergy(false);
                  setEnergy(0);
                  setOppoEnergy(0);
                }}
              >
                Reset
              </button>
            </>
          ) : (
            <button onClick={() => setPlaying(false)}>Stop</button>
          )}
        </p>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>You</h2>
            <p>{pokemon.name}</p>
            <div>
              <button
                onClick={() => {
                  setIncrEnergy(true);
                }}
              >
                {pokemon.fastMove.name}
              </button>
            </div>
            <div>
              {pokemon.chargedMoves.map((chargedMove) => (
                <button
                  onClick={() => {
                    setCount(0);
                    setEnergy((e) => e - chargedMove.energy);
                  }}
                >
                  {chargedMove.name}
                </button>
              ))}
            </div>
            <div style={{ height: 10, width: "100%", backgroundColor: "grey" }}>
              <div
                style={{
                  height: 10,
                  width: `${energy}%`,
                  backgroundColor: "green",
                  fontSize: 8,
                  transition: "width 0.5s",
                }}
              >
                {energy}
              </div>
            </div>
          </div>

          <div className={styles.card}>
            <h2>Opponent</h2>
            <p>Lapras</p>
            <div>
              <button
                onClick={() => {
                  setOppoEnergy((e) => Math.min(e + 3.33, 100));
                }}
              >
                Ice Shard
              </button>
            </div>
            <div>
              <button
                onClick={() => {
                  setCount(0);
                  setOppoEnergy((e) => e - 40);
                }}
              >
                Surf
              </button>
              <button
                onClick={() => {
                  setCount(0);
                  setOppoEnergy((e) => e - 75);
                }}
              >
                Skull Bash
              </button>
            </div>
            <div style={{ height: 10, width: "100%", backgroundColor: "grey" }}>
              <div
                style={{
                  height: 10,
                  width: `${oppoEnergy}%`,
                  backgroundColor: "green",
                  fontSize: 8,
                  transition: "width 0.5s",
                }}
              >
                {Math.floor(oppoEnergy)}
              </div>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Practice;
